<script src="//maps.google.com/maps/api/js?key=AIzaSyA2b6Qe48bvmxyYCCr1sA1QqrXCG8dJuYk"></script>
<script src="//cdn.rawgit.com/mahnunchik/markerclustererplus/master/dist/markerclusterer.min.js"></script>
<script src='//cdn.rawgit.com/printercu/google-maps-utility-library-v3-read-only/master/infobox/src/infobox_packed.js' type='text/javascript'></script> <!-- only if you need custom infoboxes -->
<%= javascript_include_tag  'js.cookie.js' %>


<div class=" body_margin" >
	<div class="row">
		<div class="col-lg-12 col-md-12 col-sm-12 panel" id="divAboveMap">
			<p>Tracking <span id="tracking_drone_name"></span></p>
		</div>
	</div>
	<div class="row">
		<div id="single_page_map" class="pos col-lg-12 col-md-12 col-sm-12" style='height: 700px;'>
			<script type="text/javascript">
				// Declare globally needed variables for the single map marker
				var marker;
				var myLatlng;
				var iconBase;
				var map;
				var mapOptions;
				var lat;
				var lng;
				var info;
				var regNumber;
				var drone_nam;
				var drone_lat;
				var drone_lng;
				var tracking_drone_name = document.getElementById('tracking_drone_name');

				//############### Load single marker (drone) on the map #################
				$(document).ready(function(){
					
					//############### Function to get drone name/registration number value from cureent URL ###############
					function getQueryVariable(variable)
					{
					       var query = window.location.search.substring(1);
					       var drone_variables = query.split("&");
					       for (var i=0;i<drone_variables.length;i++) {
				               var pair = drone_variables[i].split("=");
				               if(pair[0] == variable){
				               	return pair[1];
				               }
					       }
					       return(false);
					}
					//############### Call getQueryVariable function to get drone name value ###############		
					info = getQueryVariable("infowindow");
					if(info.indexOf("%20") >= 0){
						info = info.replace("%20", " ");
					}
					//############### Call getQueryVariable function to get registration number value ###############		
					regNumber = getQueryVariable("regNumber");
					if(regNumber.indexOf("%20") >= 0){
						regNumber = regNumber.replace("%20", " ");
					}
					tracking_drone_name.innerHTML = info;
					//tracking_drone_reg_number.innerHTML = regNumber;


					//############### Ajax to GET double-clicked drone's data to render on map AND render map layout ###############
					$.ajax({
						type: "GET",
						url: "<%= Rails.application.routes.url_helpers.mappage_index_path %>",
						cache: false,
						contentType: 'application/json',
						dataType: "json",
						data: <%= raw @hash.to_json %>,
						success: function(result){  
							//console.log(result);
							//console.log(marker.getTitle());
							for(var i = 0; i < result.length; i++){
								//Precondition: Clicked drone from initial view (mappage#index) is the same as one of the drones on initial view 
								if( info == result[i]['infowindow'] && regNumber == result[i]['marker_title']){
									console.log(result[i]['infowindow']);

									//Rebuild map marker with data recieved from mappage controller : index action
									myLatlng = new google.maps.LatLng(result[i]['lat'], result[i]['lng']);
									mapOptions = {
									  zoom: 16,
									  center: myLatlng
									}
									map = new google.maps.Map(document.getElementById("single_page_map"), mapOptions);
									iconBase = "<%= ActionController::Base.helpers.asset_path('DroneMap.png') %>";
									marker = new google.maps.Marker({
									    position: myLatlng,
									    title: result[i]['infowindow'],
									    icon: iconBase
									});
									
									//########## Create object containing no-fly zones coordinates and population(population is temporary) ##########
								    var citymap = {
									    chicago: {
								          center: {lat: 41.878, lng: -87.629},
								          population: 2714856
								        },
								        newyork: {
								          center: {lat: 40.714, lng: -74.005},
								          population: 8405837
								        },
								        losangeles: {
								          center: {lat: 34.052, lng: -118.243},
								          population: 3857799
								        },
								        vancouver: {
								          center: {lat: 49.25, lng: -123.1},
								          population: 603502
								        }
							      	};

							      	//############### Construct the circle for each value in citymap ###############
							        // Note: We scale the area of the circle based on the population.
							        for (var city in citymap) {
							          // Add the circle for this city to the map.
							          var cityCircle = new google.maps.Circle({
							            strokeColor: '#FF0000',
							            strokeOpacity: 0.8,
							            strokeWeight: 2,
							            fillColor: '#FF0000',
							            fillOpacity: 0.35,
							            map: map,
							            center: citymap[city].center,
							            radius: Math.sqrt(citymap[city].population) * 100
							          });
							        }

							        //############### Construct polyline ###############
							        var flightPlanCoordinates = [
							        	{lat: 37.777, lng: -96.77699999999999},
							          	{lat: 21.291, lng: -157.821},
							          	{lat: -18.142, lng: 178.431},
							          	{lat: -27.467, lng: 153.027}
							        ];
							        var flightPath = new google.maps.Polyline({
							          	path: flightPlanCoordinates,
							          	geodesic: true,
							          	strokeColor: '#FF0000',
							          	strokeOpacity: 1.0,
							          	strokeWeight: 2
							        });
							        //##### Add polyline #####
							        flightPath.setMap(map);
									// To add the marker to the map, call setMap();
									marker.setMap(map);
									//########## Display flight details ##########
									setLatitude("lat");
									setLongitude("lng");
									setDroneName("drone_name");
									setRegNumber("reg_number");
									//Call ajax auto_load function every 5 seconds to reload marker on map 
									setInterval(auto_load, 5000);
								}
							}
	  					},
	  					error: function(XMLHttpResquestm, textStatus, errorThrown){
	  						console.log(textStatus, errorThrown);
	  					}
	    			});		
				});

				//Make calls at an interval to reload the map
				function auto_load(){	
					//Ajax function to get marker data from mappage controller : index action 
					$.ajax({
						type: "GET",
						url: "<%= Rails.application.routes.url_helpers.mappage_index_path %>",
						cache: false,
						contentType: 'application/json',
						dataType: "json",
						data: <%= raw @hash.to_json %>,
						success: function(result){  
							//console.log(result);
							//console.log(marker.getTitle());
							var bounds = new google.maps.LatLngBounds();
							for(var i = 0; i < result.length; i++){
								//Precondition: Clicked drone from initial view (mappage#index) is the same as one of the drones on initial view 
								if( result[i]['infowindow'] == marker.getTitle() && regNumber == result[i]['marker_title']){
									//Remove marker icon from map 
									marker.setMap(null);
									//Rebuild map marker with data recieved from mappage controller : index action
									myLatlng = new google.maps.LatLng(result[i]['lat'], result[i]['lng']);
									mapOptions = {
									  zoom: 16,
									  center: myLatlng
									}
									marker = new google.maps.Marker({
									    position: myLatlng,
									    title: result[i]['infowindow'],
									    icon: iconBase
									});
									
									//#### To add the marker to the map, call setMap() #####
									marker.setMap(map);
									bounds.extend(marker.position);
									//now fit the map to the newly inclusive bounds
									//map.fitBounds(bounds);

									//########## Display flight details ##########
									setLatitude("lat");
									setLongitude("lng");
									setDroneName("drone_name");
									setRegNumber("reg_number");
								}
							}
	  					},
	  					error: function(XMLHttpResquestm, textStatus, errorThrown){
	  						console.log(textStatus, errorThrown);
	  					}
	    			});	
				};

				function setLatitude(variable){
					var lat = document.getElementById(variable);
					lat.innerHTML = marker.getPosition().lat();
				}
				function setLongitude(variable){
					var lng = document.getElementById(variable);
					lng.innerHTML = marker.getPosition().lng();
				}
				function setDroneName(variable){
					var drone_name = document.getElementById(variable);
					drone_name.innerHTML = marker.getTitle();
				}
				function setRegNumber(variable){
					var reg_number = document.getElementById(variable);
					reg_number.innerHTML = regNumber;
				}
			</script>
		</div>
	</div>

	<div class="row">
		<div class="col-lg-12 col-md-12 col-sm-12" id="single_page_bottom_wrapper">
			<div class="row">
				<div class="col-lg-6 col-md-6 col-sm-12">
					<h4 style="color: rgba(255,255,255,0.8); text-align: center;">Flight Details</h4>
					<div style="background: rgb(69, 90, 100); height: auto; min-height: 200px;">
						<div id="flight_details" style="color: rgba(255,255,255,0.9);">
							<table id="table_flight_details">
								<tr>
									<th>Latitude</th>
									<th>Longitude</th>
									<th>Drone Name</th>
									<th>Reg. Number</th>
								</tr>
								<tr>
									<td><span id="lat"></span></td>
									<td><span id="lng"></span></td>
									<td><span id="drone_name"></span></td>
									<td><span id="reg_number"></span></td>
								</tr>
							</table>
							<div id ="warning_div" class="panel">
								<h5>WARNING BELOW</h5>
							</div>
							<h6>NO-FLY ZONE: </h6>
						</div>
					</div>
				</div>
				<div class="col-lg-6 col-md-6 col-sm-12">
					<h4 style="color: rgba(255,255,255,0.8); text-align: center;">Activity Log</h4>
					<div style="background: rgb(69, 90, 100);  height: auto; min-height: 200px;">
						
					</div>
				</div>
			</div>
		</div>		
	</div>
</div>













